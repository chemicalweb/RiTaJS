[
	{
      "methodName":"addWord()",
      "example":"lexicon.addWord('abandon','ax-b ae1-n-d ax-n','vb nn vbp');",
      "description":"Adds a word to the current lexicon. Note: will replace the word if it already exists",
      "syntax":"addWord(String word, String pronunciationData, String posData)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "word" 
			},
			{ 
			"type": "String", 
			"desc": "pronunciationData" 
			},
			{ 
			"type": "String", 
			"desc": "posData" 
			}
			
	  ],
	  "returns":
      [
			{ 
			"type": "RiLexicon", 
			"desc": "this RiLexicon" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"clear()",
      "example":"",
      "description":"Clears the lexicon",
      "syntax":"clear()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "None", 
			"desc": "" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"containsWord()",
      "example":"",
      "description":"Returns true if the word exists in the lexicon (case-insensitive)",
      "syntax":"containsWord(String word)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "word" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "boolean", 
			"desc": "" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"alliterations()",
      "example":"",
      "description":"Finds alliterations by comparing the phonemes of the input string to those of each word in the lexicon",
      "syntax":"alliterations(String word)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "word input" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "String[]", 
			"desc": "strings of alliterations" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"lexicalData()",
      "example":"",
      "description":"Allows one to set/get the raw dictionary data used to create the default lexicon. <br/>See RiLexicon.addWord() for data format",
      "syntax":"lexicalData()<br/>lexicalData(Map dictionaryDataObject)",
      "parameters":
      [
			{ 
			"type": "Map", 
			"desc": "mapping words to their pronunciation/pos data (optional, for sets only)" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "RiLexicon or Map", 
			"desc": "this RiLexicon or lexical data (for gets)" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"randomWord()",
      "example":"",
      "description":"Returns a random word from the lexicon",
      "syntax":"randomWord()<br/>randomWord(String pos)<br/>randomWord(int syllableCount)<br/>randomWord(String pos, int syllableCount)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "pos (optional)" 
			},
			{ 
			"type": "int", 
			"desc": "syllableCount (optional)" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "String", 
			"desc": "random word" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"rhymes()",
      "example":"",
      "description":"Two words rhyme if their final stressed vowel and all following phonemes are identical",
      "syntax":"rhymes(String word)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "word" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "String[]", 
			"desc": "strings of the rhymes for a given word, or empty array if none are found" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"words()",
      "example":"",
      "description":"Returns the array of all words in the lexicon or those matching a specific regex. <br/>If specified, the order of the result array is randomized before return.",
      "syntax":"words()<br/>words(String regex)<br/>words(boolean order)<br/>words(String regex, boolean order)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "regex pattern to match (optional)" 
			},
			{ 
			"type": "boolean", 
			"desc": "In sorted order when true (default=false)" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "String[]", 
			"desc": "words in the RiLexicon " 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"isAdverb()",
      "example":"",
      "description":"Returns true for 'word' if it has an adverb form. That is, if any of its possible parts of speech are any variant of an adverb in the PENN part-of-speech tag set (e.g. rb, rbr, rbs)",
      "syntax":"isAdverb(String word)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "the PENN part-of-speech tag" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "boolean", 
			"desc": "true if the word can be used as an adverb " 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"isNoun()",
      "example":"",
      "description":"Returns true for 'word' if it has a noun form. That is, if any of its possible parts of speech are any variant of a noun in the PENN part-of-speech tag set(e.g. nn, nns, nnp, nnps)",
      "syntax":"isNoun(String word)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "the PENN part-of-speech tag" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "boolean", 
			"desc": "true if the word can be used as a noun" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"isVerb()",
      "example":"",
      "description":"Returns true for 'word' if it has a verb form. That is, if any of its possible parts of speech are any variant of a verb in the PENN part-of-speech tag set (e.g. vb, vbg, vbd, vbp, vbz)",
      "syntax":"isVerb(String word)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "the PENN part-of-speech tag" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "boolean", 
			"desc": "true if the word can be used as a verb" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"isAdjective()",
      "example":"",
      "description":"Returns true for 'word' if it has an adjective form. That is, if any of its possible parts of speech are any variant of an adjective in the PENN part-of-speech tag set (e.g. jj, jjr, jjs)",
      "syntax":"isAdjective(String word)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "the PENN part-of-speech tag" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "boolean", 
			"desc": "true if the word can be used as an adjective" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"isAlliteration()",
      "example":"",
      "description":"Returns true if the first stressed consonant of the two words match, else false.",
      "syntax":"isAlliteration(String word1, String word2)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "word1" 
			},
			{ 
			"type": "String", 
			"desc": "word2" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "boolean", 
			"desc": "true if word1.equals(word2) and false if either (or both) are null;" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"isRhyme()",
      "example":"",
      "description": "Returns true if the two words rhyme, that is, if their final stressed phoneme and all following phonemes are identical, else false.<br/><br/>Note: returns false if word1.equals(word2) or if either (or both) are null;<br/><br/>Note: at present doesn't use letter-to-sound engine if either word is not found in the lexicon, but instead just returns false.",
      
      "COMMENT.syntax":"isRhyme(String word1, String word2, boolean useLTS)",
      
      "syntax":"isRhyme(String word1, String word2)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "word1" 
			},
			{ 
			"type": "String", 
			"desc": "word2" 
			},
			{  
			 "type": "boolean", 
			 "desc": "useLTS (optional, default=false)" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "boolean", 
			"desc": "true if the two words rhyme, else false." 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"reload()",
      "example":"",
      "description":"",
      "syntax":"reload()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "None", 
			"desc": "" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"removeWord()",
      "example":"removeWord('abandon');",
      "description":"Removes a word from the current lexicon ",
      "syntax":"removeWord(String word)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "word" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "RiLexicon", 
			"desc": "this RiLexicon" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"setLexicalData()",
      "example":"",
      "description":"",
      "syntax":"setLexicalData()",
      "parameters":
      [
			{ 
			"type": "", 
			"desc": "" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "", 
			"desc": "" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"similarByLetter()",
      "example":"",
      "description":"Compares the characters of the input string  (using a version of the min-edit distance algorithm) to each word in the lexicon, returning the set of closest matches.",
      "syntax":"similarByLetter(String word)<br/>similarByLetter(String word, int minAllowedDist)<br/>similarByLetter(String word, int minAllowedDist, boolean preserveLength)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "word" 
			},
			{ 
			"type": "int", 
			"desc": "minimum edit distance for matches (optional, default=1)" 
			},
			{ 
			"type": "boolean", 
			"desc": "whether to return only words that match the length of the input word (optional, default=true)" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "String[]", 
			"desc": "matching words" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"similarBySound()",
      "example":"",
      "description":"Compares the phonemes of the input string (using a version of the min-edit distance algorithm) to each word in the lexicon, returning the set of closest matches.",
      "syntax":"similarBySound(String input)<br/>similarByLetter(String input, int minAllowedDist)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "input" 
			},
			{ 
			"type": "int", 
			"desc": "minimum edit distance for matches (optional, default=1)" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "String[]", 
			"desc": "matching words" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"similarBySoundAndLetter()",
      "example":"",
      "description":"First calls similarBySound(), then filters the result set by the algorithm used in similarByLetter();<br/><br/>(useful when similarBySound() returns too large a result set)",
      "syntax":"similarBySoundAndLetter(String word)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "word" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "String[]", 
			"desc": "matching words" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"size()",
      "example":"",
      "description":"Returns the number of words currently in the lexicon ",
      "syntax":"size()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "int", 
			"desc": "words" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"substrings()",
      "example":"",
      "description":"Returns all valid substrings of the input word in the lexicon ",
      "syntax":"substrings(String word)<br/>substrings(String word, int minLength)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "word" 
			},
			{ 
			"type": "int", 
			"desc": "(optional, default=4) minimum length of return word " 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "String[]", 
			"desc": "matching words" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"superstrings()",
      "example":"",
      "description":"Returns all valid superstrings of the input word in the lexicon ",
      "syntax":"superstrings(String word)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "word" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "String[]", 
			"desc": "matching words" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   }
]