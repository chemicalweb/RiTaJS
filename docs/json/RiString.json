[
	{
      "methodName":"analyze()",
      "example":"myRiString.get('phonemes') ||  myRiString.get(RiTa.PHONEMES);",
      "description":"Computes a set of features for the contained string, including phonemes, syllables, stresses, etc. <br/>To access any of these, use get(name)",
      "syntax":"analyze()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			}
			
	  ],
	  "returns":
      [
			{ 
			"type": "RiString", 
			"desc": "this RiString" 
			}
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"charAt()",
      "example":"",
      "description":"Returns the character at the given 'index', or empty string if none is found",
      "syntax":"charAt(int index)",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "index of the character" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "String", 
			"desc": "the character" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"concat()",
      "example":"",
      "description":"Concatenates the text from another RiString at the end of this one",
      "syntax":"concat(RiString riString)",
      "parameters":
      [
			{ 
			"type": "RiString", 
			"desc": "RiString" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "RiString", 
			"desc": "this RiString" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"endsWith()",
      "example":"",
      "description":"Tests if this string ends with the specified suffix",
      "syntax":"endsWith(String substr)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "string the suffix" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "boolean", 
			"desc": "true if the character sequence represented by the argument is a suffix of the character sequence represented by this object; false otherwise" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"equals()",
      "example":"",
      "description":"Compares this RiString to the specified object. <br/>The result is true if and only if the argument is not null and is a String or RiString object that represents the same sequence of characters as this object.",
      "syntax":"equals(String arg)<br/>equals(RiString arg)",
      "parameters":
      [
			{ 
			"type": "String OR RiString", 
			"desc": "String or RiString object to compare this RiString against" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "boolean", 
			"desc": "true if the RiString are equal; false otherwise." 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"equalsIgnoreCase()",
      "example":"",
      "description":"Compares this RiString to another RiString, ignoring case considerations",
      "syntax":"equalsIgnoreCase(String arg)<br/>equalsIgnoreCase(RiString arg)",
      "parameters":
      [
			{ 
			"type": "String OR RiString", 
			"desc": "String or RiString object to compare this RiString against" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "boolean", 
			"desc": "true if the argument is not null and the Strings are equal, ignoring case; false otherwise" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"indexOf()",
      "example":"",
      "description":"Returns the index within this string of the first occurrence of the specified character",
      "syntax":"indexOf(String searchstring)<br/>indexOf(String searchstring, int start)",
      "parameters":
      [
			{ 
			"type": "String OR RiString", 
			"desc": "searchstring (Required) or character to search for" 
			},
			{ 
			"type": "int", 
			"desc": "(Optional) The start position in the string to start the search. If omitted, the search starts from position 0" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "int", 
			"desc": "the first index of the matching pattern or -1 if none are found" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
    {
      "methodName":"insertWordAt()",
      "example":"",
      "description":"Inserts 'newWord' at 'wordIdx' and shifts each subsequent word accordingly.",
      "syntax":"insertWordAt(String newWord, int wordIdx)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "" 
			},
			{ 
			"type": "int", 
			"desc": "" 
			}
		
	  ],
	  "returns":
      [
			{ 
			"type": "RiString", 
			"desc": "this RiString" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"lastIndexOf()",
      "example":"",
      "description":"Returns the index within this string of the last occurrence of the specified character",
      "syntax":"lastIndexOf(String searchstring)<br/>lastIndexOf(String searchstring, int start)",
      "parameters":
      [
			{ 
			"type": "String OR RiString", 
			"desc": "searchstring (Required) or character to search for" 
			},
			{ 
			"type": "int", 
			"desc": "(Optional) The start position in the string to start the search. If omitted, the search starts from position 0" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "int", 
			"desc": "the last index of the matching pattern or -1 if none are found" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"length()",
      "example":"",
      "description":"Returns the length of this string",
      "syntax":"length()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			}
		
	  ],
	  "returns":
      [
			{ 
			"type": "int", 
			"desc": "the length" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"match()",
      "example":"",
      "description":"Searches for a match between a substring (or regular expression) and the contained string, and _returns the matches",
      "syntax":"match(String regex)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "regex Regular expression" 
			}
		
	  ],
	  "returns":
      [
			{ 
			"type": "String[]", 
			"desc": "strings matches or empty array if none are found" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"pos()",
      "example":"",
      "description":"Returns an array of part-of-speech tags, one per word, using RiTa.tokenize() and RiTa.getPosTags()",
      "syntax":"pos()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			}
		
	  ],
	  "returns":
      [
			{ 
			"type": "String[]", 
			"desc": "strings of pos, one per word" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"posAt()",
      "example":"",
      "description":"Returns the part-of-speech tag for the word at 'index', using RiTa.tokenize() and RiTa.getPosTags()",
      "syntax":"posAt(int index)",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "the word index" 
			}
		
	  ],
	  "returns":
      [
			{ 
			"type": "String", 
			"desc": "the pos" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"removeCharAt()",
      "example":"",
      "description":"Removes the character at the specified index",
      "syntax":"removeCharAt(int index)",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "the index" 
			}
		
	  ],
	  "returns":
      [
			{ 
			"type": "RiString", 
			"desc": "this RiString" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"replaceCharAt()",
      "example":"",
      "description":"Replaces the character at 'idx' with 'replaceWith'. <br/>If the specified 'idx' is less than zero, or beyond the length of the current text, there will be no effect",
      "syntax":"replaceCharAt(int idx, String replaceWith)",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "the character index" 
			},
			{ 
			"type": "String", 
			"desc": "the replacement" 
			}
		
	  ],
	  "returns":
      [
			{ 
			"type": "RiString", 
			"desc": "this RiString" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"replaceFirst()",
      "example":"",
      "description":"Replaces the first instance of 'regex' with 'replaceWith'",
      "syntax":"replaceFirst(String regex, String replaceWith)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "regex the pattern" 
			},
			{ 
			"type": "String", 
			"desc": "the replacement" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "RiString", 
			"desc": "this RiString" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"replaceLast()",
      "example":"",
      "description":"Replaces the last instance of 'regex' with 'replaceWith'",
      "syntax":"replaceLast(String regex, String replaceWith)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "regex the pattern" 
			},
			{ 
			"type": "String", 
			"desc": "the replacement" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "RiString", 
			"desc": "this RiString" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"replaceAll()",
      "example":"",
      "description":"Replaces each substring of this string that matches the given regular expression with the given replacement.",
      "syntax":"replaceAll(String regex, String replaceWith)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "the pattern to be matched" 
			},
			{ 
			"type": "String", 
			"desc": "the replacement sequence of char values" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "RiString", 
			"desc": "this RiString" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"replaceWordAt()",
      "example":"",
      "description":"Replaces the word at 'wordIdx' with 'newWord'",
      "syntax":"replaceWordAt(int wordIdx, String newWord)",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "the index" 
			},
			{ 
			"type": "String", 
			"desc": "the replacement" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "RiString", 
			"desc": "this RiString" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"slice()",
      "example":"",
      "description":"Extracts a part of a string from this RiString",
      "syntax":"slice(int begin)<br/>slice(int begin, int end)",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "(Required) The index where to begin the extraction. First character is at index 0" 
			},
			{ 
			"type": "int", 
			"desc": "(Optional) Where to end the extraction. If omitted, slice() selects all characters from the begin position to the end of the string" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "String", 
			"desc": "" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"split()",
      "example":"",
      "description":"Split a RiString into an array of RiStrings, one for each element after the split, and returns the new array. <br/>If an empty string ('') is used as the separator, the string is split between each character.",
      "syntax": "split()<br/>split(String separator)<br/>",
      "parameters": [
			{ 
			"type": "String", 
			"desc": "(Optional) Specifies the character to use for splitting the string. If omitted, the string is split according to RiTa.tokenize(). If an empty string ('') is used as the separator, the string is split between each character." 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "RiStrings[]", 
			"desc": "RiStrings" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"startsWith()",
      "example":"",
      "description":"Tests if this string starts with the specified prefix",
      "syntax":"startsWith(String substr)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "string the prefix" 
			}

	  ],
	  "returns":
      [
			{ 
			"type": "boolean", 
			"desc": "true if the character sequence represented by the argument is a prefix of the character sequence represented by this string; false otherwise. <br/>Note also that true will be returned if the argument is an empty string or is equal to this RiString object as determined by the equals() method." 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"substring()",
      "example":"",
      "description":"Extracts the characters from a string, between two specified indices, and sets the current text to be that string. ",
      "syntax":"substring(int from)<br/>substring(int from, int to)",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "The index where to start the extraction. First character is at index 0" 
			},
			{ 
			"type": "int", 
			"desc": "(optional) The index where to stop the extraction. If omitted, it extracts the rest of the string" 
			}

	  ],
	  "returns":
      [
			{ 
			"type": "String", 
			"desc": "" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"substr()",
      "example":"",
      "description":"Extracts the characters from this objects contained string, beginning at 'start' and continuing through the specified number of characters, and sets the current text to be that string. (from Javascript String)",
      "syntax":"substr(int start)<br/>substr(int start, int length)",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "The index where to start the extraction. First character is at index 0" 
			},
			{ 
			"type": "int", 
			"desc": "(optional) The index where to stop the extraction. If omitted, it extracts the rest of the string" 
			}

	  ],
	  "returns":
      [
			{ 
			"type": "String", 
			"desc": "" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"text()",
      "example":"",
      "description":"Gets/sets the text contained by this object",
      "syntax":"text()<br/>text(String theText)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "text (optional)" 
			}

	  ],
	  "returns":
      [
			{ 
			"type": "String OR RiString", 
			"desc": "the contained text (for sets) or this RiString (for gets)" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"toCharArray()",
      "example":"",
      "description":"Converts this object to an array of RiString objects, one per character",
      "syntax":"toCharArray()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			}

	  ],
	  "returns":
      [
			{ 
			"type": "RiString[]", 
			"desc": "RiStrings with each letter as its own RiString element" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"toLowerCase()",
      "example":"",
      "description":"Converts all of the characters in this RiString to lower case",
      "syntax":"toLowerCase()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			}

	  ],
	  "returns":
      [
			{ 
			"type": "RiString", 
			"desc": "this RiString" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"toUpperCase()",
      "example":"",
      "description":"Converts all of the characters in this RiString to upper case",
      "syntax":"toUpperCase()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			}

	  ],
	  "returns":
      [
			{ 
			"type": "RiString", 
			"desc": "this RiString" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"trim()",
      "example":"",
      "description":"Returns a copy of the string, with leading and trailing whitespace omitted.",
      "syntax":"trim()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			}

	  ],
	  "returns":
      [
			{ 
			"type": "RiString", 
			"desc": "this RiString" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"wordAt()",
      "example":"",
      "description":"Returns the word at 'index', according to RiTa.tokenize()",
      "syntax":"wordAt(int index)",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "the word index" 
			}

	  ],
	  "returns":
      [
			{ 
			"type": "String", 
			"desc": "this word" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"wordCount()",
      "example":"",
      "description":"Returns the number of words in the object, according to RiTa.tokenize().",
      "syntax":"wordCount()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			}

	  ],
	  "returns":
      [
			{ 
			"type": "int", 
			"desc": "number of words" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"words()",
      "example":"",
      "description":"Returns the array of words in the object, via a call to RiTa.tokenize()",
      "syntax":"words()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			}

	  ],
	  "returns":
      [
			{ 
			"type": "String[]", 
			"desc": "strings, one per word" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   }  
]