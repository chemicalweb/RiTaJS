[
	{
      "methodName":"x",
      "example":"",
      "description":"variable",
      "syntax":"",
      "parameters":
      [
			{ 
			"type": "", 
			"desc": "" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "", 
			"desc": "" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
	  
   },
   {
      "methodName":"y",
      "example":"",
      "description":"variable",
      "syntax":"",
      "parameters":
      [
			{ 
			"type": "", 
			"desc": "" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "", 
			"desc": "" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"z",
      "example":"",
      "description":"variable",
      "syntax":"",
      "parameters":
      [
			{ 
			"type": "", 
			"desc": "" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "", 
			"desc": "" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },

	{
      "methodName":"analyze()",
      "example":"myRiText.get('phonemes') ||  myRiText.get(RiTa.PHONEMES);",
      "description":"Computes a set of features for the contained string, including phonemes, syllables, stresses, etc. <br/>To access any of these, use get(name)",
      "syntax":"analyze()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "RiText", 
			"desc": "this RiText" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"charAt()",
      "example":"",
      "description":"Returns the character at the given 'index', or empty string if none is found",
      "syntax":"charAt(int index)",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "index of the character" 
			},
	  ],
	  "returns":
      [
			{ 
			"type": "String", 
			"desc": "the character" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"concat()",
      "example":"",
      "description":"Concatenates the text from another RiText at the end of this one",
      "syntax":"concat(RiText riText)",
      "parameters":
      [
			{ 
			"type": "RiText", 
			"desc": "" 
			},
	  ],
	  "returns":
      [
			{ 
			"type": "RiText", 
			"desc": "this RiText" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"endsWith()",
      "example":"",
      "description":"Tests if this string ends with the specified suffix",
      "syntax":"endsWith(String substr)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "string the suffix" 
			},
	  ],
	  "returns":
      [
			{ 
			"type": "boolean", 
			"desc": "true if the character sequence represented by the argument is a suffix of the character sequence represented by this object; false otherwise" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"equals()",
      "example":"",
      "description":"Compares this RiText to the specified object. <br/>The result is true if and only if the argument is not null and is a String or RiText object that represents the same sequence of characters as this object.",
      "syntax":"equals(String arg)<br/>equals(RiText arg)",
      "parameters":
      [
			{ 
			"type": "String OR RiText", 
			"desc": "String or RiText object to compare this RiText against" 
			},
	  ],
	  "returns":
      [
			{ 
			"type": "boolean", 
			"desc": "true if the RiText are equal; false otherwise." 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"equalsIgnoreCase()",
      "example":"",
      "description":"Compares this RiText to another RiText, ignoring case considerations",
      "syntax":"equalsIgnoreCase(String arg)<br/>equalsIgnoreCase(RiText arg)",
      "parameters":
      [
			{ 
			"type": "String OR RiText", 
			"desc": "String or RiText object to compare this RiText against" 
			},
	  ],
	  "returns":
      [
			{ 
			"type": "boolean", 
			"desc": "true if the argument is not null and the Strings are equal, ignoring case; false otherwise" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"indexOf()",
      "example":"",
      "description":"Returns the index within this string of the first occurrence of the specified character",
      "syntax":"indexOf(String searchstring)<br/>indexOf(String searchstring, int start)",
      "parameters":
      [
			{ 
			"type": "String OR RiText", 
			"desc": "searchstring (Required) or character to search for" 
			},
			{ 
			"type": "int", 
			"desc": "(Optional) The start position in the string to start the search. If omitted, the search starts from position 0" 
			},
	  ],
	  "returns":
      [
			{ 
			"type": "int", 
			"desc": "the first index of the matching pattern or -1 if none are found" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
    {
      "methodName":"insertWordAt()",
      "example":"",
      "description":"Inserts 'newWord' at 'wordIdx' and shifts each subsequent word accordingly.",
      "syntax":"insertWordAt(String newWord, int wordIdx)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "" 
			},
			{ 
			"type": "int", 
			"desc": "" 
			},
		
	  ],
	  "returns":
      [
			{ 
			"type": "RiText", 
			"desc": "this RiText" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"lastIndexOf()",
      "example":"",
      "description":"Returns the index within this string of the last occurrence of the specified character",
      "syntax":"lastIndexOf(String searchstring)<br/>lastIndexOf(String searchstring, int start)",
      "parameters":
      [
			{ 
			"type": "String OR RiText", 
			"desc": "searchstring (Required) or character to search for" 
			},
			{ 
			"type": "int", 
			"desc": "(Optional) The start position in the string to start the search. If omitted, the search starts from position 0" 
			},
	  ],
	  "returns":
      [
			{ 
			"type": "int", 
			"desc": "the last index of the matching pattern or -1 if none are found" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"length()",
      "example":"",
      "description":"Returns the length of this string",
      "syntax":"length()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			},
		
	  ],
	  "returns":
      [
			{ 
			"type": "int", 
			"desc": "the length" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"match()",
      "example":"",
      "description":"Searches for a match between a substring (or regular expression) and the contained string, and _returns the matches",
      "syntax":"match(String regex)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "regex Regular expression" 
			},
		
	  ],
	  "returns":
      [
			{ 
			"type": "String[]", 
			"desc": "strings matches or empty array if none are found" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"pos()",
      "example":"",
      "description":"Returns an array of part-of-speech tags, one per word, using RiTa.tokenize() and RiTa.getPosTags()",
      "syntax":"pos()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			},
		
	  ],
	  "returns":
      [
			{ 
			"type": "String[]", 
			"desc": "strings of pos, one per word" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"posAt()",
      "example":"",
      "description":"Returns the part-of-speech tag for the word at 'index', using RiTa.tokenize() and RiTa.getPosTags()",
      "syntax":"posAt(int index)",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "the word index" 
			},
		
	  ],
	  "returns":
      [
			{ 
			"type": "String", 
			"desc": "the pos" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"removeCharAt()",
      "example":"",
      "description":"Removes the character at the specified index",
      "syntax":"removeCharAt(int index)",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "the index" 
			},
		
	  ],
	  "returns":
      [
			{ 
			"type": "RiText", 
			"desc": "this RiText" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"replaceCharAt()",
      "example":"",
      "description":"Replaces the character at 'idx' with 'replaceWith'. <br/>If the specified 'idx' is less than zero, or beyond the length of the current text, there will be no effect",
      "syntax":"replaceCharAt(int idx, String replaceWith)",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "the character index" 
			},
			{ 
			"type": "String", 
			"desc": "the replacement" 
			},
		
	  ],
	  "returns":
      [
			{ 
			"type": "RiText", 
			"desc": "this RiText" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"replaceFirst()",
      "example":"",
      "description":"Replaces the first instance of 'regex' with 'replaceWith'",
      "syntax":"replaceFirst(String regex, String replaceWith)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "regex the pattern" 
			},
			{ 
			"type": "String", 
			"desc": "the replacement" 
			},
	  ],
	  "returns":
      [
			{ 
			"type": "RiText", 
			"desc": "this RiText" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"replaceLast()",
      "example":"",
      "description":"Replaces the last instance of 'regex' with 'replaceWith'",
      "syntax":"replaceLast(String regex, String replaceWith)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "regex the pattern" 
			},
			{ 
			"type": "String", 
			"desc": "the replacement" 
			},
	  ],
	  "returns":
      [
			{ 
			"type": "RiText", 
			"desc": "this RiText" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"replaceAll()",
      "example":"",
      "description":"Replaces each substring of this string that matches the given regular expression with the given replacement.",
      "syntax":"replaceAll(String regex, String replaceWith)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "the pattern to be matched" 
			},
			{ 
			"type": "String", 
			"desc": "the replacement sequence of char values" 
			},
	  ],
	  "returns":
      [
			{ 
			"type": "RiText", 
			"desc": "this RiText" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"replaceWordAt()",
      "example":"",
      "description":"Replaces the word at 'wordIdx' with 'newWord'",
      "syntax":"replaceWordAt(int wordIdx, String newWord)",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "the index" 
			},
			{ 
			"type": "String", 
			"desc": "the replacement" 
			},
	  ],
	  "returns":
      [
			{ 
			"type": "RiText", 
			"desc": "this RiText" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"slice()",
      "example":"",
      "description":"Extracts a part of a string from this RiText",
      "syntax":"slice(int begin)<br/>slice(int begin, int end)",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "(Required) The index where to begin the extraction. First character is at index 0" 
			},
			{ 
			"type": "int", 
			"desc": "(Optional) Where to end the extraction. If omitted, slice() selects all characters from the begin position to the end of the string" 
			},
	  ],
	  "returns":
      [
			{ 
			"type": "String", 
			"desc": "" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"split()",
      "example":"",
      "description":"Split a RiText into an array of sub-RiText and return the new array. <br/>If an empty string ('') is used as the separator, the string is split between each character.",
      "syntax":"split()<br/>split(String separator)<br/>split(int limit)<br/>split(String separator, int limit)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "(Optional) Specifies the character to use for splitting the string. If omitted, the entire string will be returned. If an empty string ('') is used as the separator, the string is split between each character." 
			},
			{ 
			"type": "int", 
			"desc": "(Optional) An integer that specifies the number of splits" 
			},
	  ],
	  "returns":
      [
			{ 
			"type": "RiText[]", 
			"desc": "RiTexts" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"startsWith()",
      "example":"",
      "description":"Tests if this string starts with the specified prefix",
      "syntax":"startsWith(String substr)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "string the prefix" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "boolean", 
			"desc": "true if the character sequence represented by the argument is a prefix of the character sequence represented by this string; false otherwise. <br/>Note also that true will be returned if the argument is an empty string or is equal to this RiText object as determined by the equals() method." 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"substring()",
      "example":"",
      "description":"Extracts the characters from a string, between two specified indices, and sets the current text to be that string. ",
      "syntax":"substring(int from)<br/>substring(int from, int to)",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "The index where to start the extraction. First character is at index 0" 
			},
			{ 
			"type": "int", 
			"desc": "(optional) The index where to stop the extraction. If omitted, it extracts the rest of the string" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "String", 
			"desc": "" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"substr()",
      "example":"",
      "description":"Extracts the characters from this objects contained string, beginning at 'start' and continuing through the specified number of characters, and sets the current text to be that string. (from Javascript String)",
      "syntax":"substr(int start)<br/>substr(int start, int length)",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "The index where to start the extraction. First character is at index 0" 
			},
			{ 
			"type": "int", 
			"desc": "(optional) The index where to stop the extraction. If omitted, it extracts the rest of the string" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "String", 
			"desc": "" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"text()",
      "example":"",
      "description":"Gets/sets the text contained by this object",
      "syntax":"text()<br/>text(String theText)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "text (optional)" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "String OR RiText", 
			"desc": "the contained text (for sets) or this RiText (for gets)" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"toCharArray()",
      "example":"",
      "description":"Converts this object to an array of RiText objects, one per character",
      "syntax":"toCharArray()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "RiText[]", 
			"desc": "RiTexts with each letter as its own RiText element" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"toLowerCase()",
      "example":"",
      "description":"Converts all of the characters in this RiText to lower case",
      "syntax":"toLowerCase()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "RiText", 
			"desc": "this RiText" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"toUpperCase()",
      "example":"",
      "description":"Converts all of the characters in this RiText to upper case",
      "syntax":"toUpperCase()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "RiText", 
			"desc": "this RiText" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"trim()",
      "example":"",
      "description":"Returns a copy of the string, with leading and trailing whitespace omitted.",
      "syntax":"trim()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "RiText", 
			"desc": "this RiText" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"wordAt()",
      "example":"",
      "description":"Returns the word at 'index', according to RiTa.tokenize()",
      "syntax":"wordAt(int index)",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "the word index" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "String", 
			"desc": "this word" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"wordCount()",
      "example":"",
      "description":"Returns the number of words in the object, according to RiTa.tokenize().",
      "syntax":"wordCount()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "int", 
			"desc": "number of words" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"words()",
      "example":"",
      "description":"Returns the array of words in the object, via a call to RiTa.tokenize()",
      "syntax":"words()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "String[]", 
			"desc": "strings, one per word" 
			},
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
  











	{
      "methodName":"alpha()",
      "example":"",
      "description":"Set/gets the alpha (transparency) for this RiText",
      "syntax":"alpha()<br/>alpha(float a)",
      "parameters":
      [
			{ 
			"type": "float", 
			"desc": "(optional) input (0-255) " 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "RiText OR float", 
			"desc": "either this RiText (for set) or the current alpha value (for get)" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"boundingBox()",
      "example":"",
      "description":"Returns the relative bounding box for the current text",
      "syntax":"boundingBox(boolean transformed)",
      "parameters":
      [
			{ 
			"type": "boolean", 
			"desc": "(optional, default=false) if true, bounding box is first transformed (rotate,translate,scale)" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "float[]", 
			"desc": "x,y,width,height" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"center()",
      "example":"",
      "description":"Returns the center point of this RiText as derived from its bounding box",
      "syntax":"center()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "float[]", 
			"desc": "x,y" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"charOffset()",
      "example":"",
      "description":"Returns the pixel x-offset for the character at 'charIdx'",
      "syntax":"charOffset(int charIdx)",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "charIdx" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "float", 
			"desc": "the pixel offset" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"clone()",
      "example":"",
      "description":"Creates and returns a new (copy) of this RiText",
      "syntax":"clone()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "RiText", 
			"desc": "RiText" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"color()",
      "example":"",
      "description":"Set/gets the color for this RiText",
      "syntax":"color()<br/>color(float[] rgba)<br/>color(float r, float, float b, float a)",
      "parameters":
      [
			{ 
			"type": "float OR float[]", 
			"desc": "cr" 
			},
			{ 
			"type": "float", 
			"desc": "cg" 
			},
			{ 
			"type": "float", 
			"desc": "cb" 
			},
			{ 
			"type": "float", 
			"desc": "ca" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "RiText OR float[]", 
			"desc": "either this RiText (for sets) or the current color object (for gets)" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"contains()",
      "example":"",
      "description":"Returns true if the bounding box for this RiText contains the point mx/my",
      "syntax":"contains(float mx, float my)",
      "parameters":
      [
			{ 
			"type": "float", 
			"desc": "mx" 
			},
			{ 
			"type": "float", 
			"desc": "my" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "boolean", 
			"desc": "" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"distanceTo()",
      "example":"",
      "description":"Returns the distance between the center points of this and another RiText",
      "syntax":"distanceTo(float mx, float my)",
      "parameters":
      [
			{ 
			"type": "float", 
			"desc": "mx" 
			},
			{ 
			"type": "float", 
			"desc": "my" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "float", 
			"desc": "the distance" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"draw()",
      "example":"",
      "description":"Draws the object to the screen",
      "syntax":"draw()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "RiText", 
			"desc": "this RiText" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"font()",
      "example":"",
      "description":"Set/gets the font for this RiText",
      "syntax":"font()<br/>font(Pfont font)<br/>font(string font, float size)",
      "parameters":
      [
			{ 
			"type": "PFont", 
			"desc": "(optional) containing the font data OR" 
			},
			{ 
			"type": "String", 
			"desc": "font containing the font name AND" 
			},
			{ 
			"type": "float", 
			"desc": "size (optional) containing the font size " 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "RiText", 
			"desc": "this RiText (set) or the current font (get)" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"fontSize()",
      "example":"",
      "description":"Sets/gets the size of the current font. Note: this method only effects only scaleX/Y, not the font's internal properties",
      "syntax":"fontSize()<br/>fontSize(float sz)",
      "parameters":
      [
			{ 
			"type": "float", 
			"desc": "(optional) font size" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "RiText OR float", 
			"desc": "either this RiText (for set) or the current font size (for get)" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"motionType()",
      "example":"",
      "description":"Sets/gets the animation <code>motionType</code> for this RiText
		 according to one of the following functions: <br/>
		 <ul>
		 <li>RiText.LINEAR
		 <br/><br/>
		 <li>RiText.EASE_IN
		 <li>RiText.EASE_OUT
		 <li>RiText.EASE_IN_OUT
		 <br/><br/>
		 <li>RiText.EASE_IN_EXPO
		 <li>RiText.EASE_OUT_EXPO
		 <li>RiText.EASE_IN_OUT_EXPO
		 <br/><br/>
		 <li>RiText.EASE_IN_SINE
		 <li>RiText.EASE_OUT_SINE
		 <li>RiText.EASE_IN_OUT_SINE
		 <br/><br/>
		 <li>RiText.EASE_IN_CUBIC
		 <li>RiText.EASE_OUT_CUBIC
		 <li>RiText.EASE_IN_OUT_CUBIC
		 <br/><br/>
		 <li>RiText.EASE_IN_QUARTIC
		 <li>RiText.EASE_OUT_QUARTIC
		 <li>RiText.EASE_IN_OUT_QUARTIC
		 <br/><br/>
		 <li>RiText.EASE_IN_QUINTIC
		 <li>RiText.EASE_OUT_QUINTIC
		 <li>RiText.EASE_IN_OUT_QUINTIC
		 <br/><br/>
		 <li>RiText.BACK_IN
		 <li>RiText.BACK_OUT
		 <li>RiText.BACK_IN_OUT
		 <br/><br/>
		 <li>RiText.BOUNCE_IN
		 <li>RiText.BOUNCE_OUT
		 <li>RiText.BOUNCE_IN_OUT
		 <br/><br/>
		 <li>RiText.CIRCULAR_IN
		 <li>RiText.CIRCULAR_OUT
		 <li>RiText.CIRCULAR_IN_OUT
		 <br/><br/>
		 <li>RiText.ELASTIC_IN
		 <li>RiText.ELASTIC_OUT
		 <li>RiText.ELASTIC_IN_OUT                  
		 </ul>",
      "syntax":"motionType()<br/>motionType(int motionType)",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "motionType" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "int OR RiText", 
			"desc": "motionType or RiText (for gets)" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"position()",
      "example":"",
      "description":"Set/gets the font for this RiText",
      "syntax":"position()<br/>position(float x, float y)",
      "parameters":
      [
			{ 
			"type": "float", 
			"desc": "(optional) X coordinate" 
			},
			{ 
			"type": "float", 
			"desc": "(optional) Y coordinate" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "RiText OR float[]", 
			"desc": "either this RiText (for sets) or object {x, y} (for gets)" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"rotate()",
      "example":"",
      "description":"Sets/gets the 2d rotation for this RiText",
      "syntax":"rotate()<br/>rotate(float rotate)",
      "parameters":
      [
			{ 
			"type": "float", 
			"desc": "degree to rotate" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "RiText OR float[]", 
			"desc": "either this RiText (for sets) or the current degree of rotation (for gets)" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"scale()",
      "example":"",
      "description":"Sets/gets the scale factor for this RiText (takes 0-2 arguments) ",
      "syntax":"scale()<br/>scale(float scaleX)<br/>scale(float scaleX, float scale Y)",
      "parameters":
      [
			{ 
			"type": "float", 
			"desc": "the ScaleX ratio" 
			},
			{ 
			"type": "float", 
			"desc": "(optional) the ScaleY ratio" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "RiText OR float[]", 
			"desc": "either this RiText (for sets) or the current scales (for gets)" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"showBoundingBox()",
      "example":"",
      "description":"Set/gets the boundingbox visibility for this RiText ",
      "syntax":"showBoundingBox()<br/>showBoundingBox(boolean trueOrFalse)",
      "parameters":
      [
			{ 
			"type": "boolean", 
			"desc": "(optional) true or false " 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "RiText OR boolean", 
			"desc": "this RiText (set) or the current boolean value (get)" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"splitLetters()",
      "example":"",
      "description":"Splits the object into an array of RiTexts, one per letter.",
      "syntax":"splitLetters()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "RiTexts[]", 
			"desc": "RiTexts" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"splitWords()",
      "example":"",
      "description":"Splits the object into an array of RiTexts, one per word tokenized with the supplied regex.",
      "syntax":"splitWords(String regex)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "String or regex to split" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "RiText[]", 
			"desc": "RiTexts" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"textHeight()",
      "example":"",
      "description":"Returns the current height of the text (derived from the bounding box)",
      "syntax":"textHeight()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "float", 
			"desc": "the current height of the text" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"textAscent()",
      "example":"",
      "description":"Returns the ascent of the current font ",
      "syntax":"textAscent()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "float", 
			"desc": "the ascent of the current font" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"textDescent()",
      "example":"",
      "description":"Returns the descent of the current font ",
      "syntax":"textDescent()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "float", 
			"desc": "the descent of the current font" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"textWidth()",
      "example":"",
      "description":"Returns the current width of the text (derived from the bounding box)",
      "syntax":"textWidth()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "float", 
			"desc": "the width of the text" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"isVisible()",
      "example":"",
      "description":"Returns false if the alpha value of this object is &lt;= 0, else true",
      "syntax":"isVisible()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "boolean", 
			"desc": "" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"wordOffset()",
      "example":"",
      "description":"Returns the pixel x-offset for the word at 'wordIdx'",
      "syntax":"wordOffset(int wordIdx)",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "wordIdx" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "float", 
			"desc": "the pixel x-offset" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"fadeIn()",
      "example":"",
      "description":"Fades in current text over <code>seconds</code> starting at <code>startTime</code>. <br/>Interpolates from the current color {r,g,b,a} to {r,g,b,255}.",
      "syntax":"fadeIn(float seconds, float delay, function callback)",
      "parameters":
      [
			{ 
			"type": "float", 
			"desc": "time in future to start (seconds)" 
			},
			{ 
			"type": "float", 
			"desc": "time for fade (seconds)" 
			},
			{ 
			"type": "function", 
			"desc": "callback" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "int", 
			"desc": "the unique id for this behavior" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"fadeOut()",
      "example":"",
      "description":"Fades out current text over <code>seconds</code> starting at <code>startTime</code>. <br/>Interpolates from the current color {r,g,b,a} to {r,g,b,255}.",
      "syntax":"fadeOut(float seconds)<br/>fadeOut(float seconds, float delay)<br/>fadeOut(float seconds, float delay, function callback)<br/>fadeOut(float seconds, float delay, function callback, boolean destroyOnComplete)",
      "parameters":
      [
			{ 
			"type": "float", 
			"desc": "time for fade (seconds)" 
			},
			{ 
			"type": "float", 
			"desc": "(optional, default=0),  # of seconds in the future that the fade will start  (seconds)" 
			},
			{ 
			"type": "function", 
			"desc": "callback the callback to be invoked when the behavior has completed (optional: default=onRiTaEvent(e))" 
			},
			{ 
			"type": "boolean", 
			"desc": "(optional, default=false), destroys the object when the behavior completes" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "int", 
			"desc": "the unique id for this behavior" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"moveTo()",
      "example":"",
      "description":"Move to new x,y position over 'seconds'<br/><br/>Note: uses the current <code>motionType</code> for this object, starting at 'delay' seconds in the future",
      "syntax":"moveTo(float newX, float newY, float seconds, float delay)",
      "parameters":
      [
			{ 
			"type": "float", 
			"desc": "newX" 
			},
			{ 
			"type": "float", 
			"desc": "newY" 
			},
			{ 
			"type": "float", 
			"desc": "seconds" 
			},
			{ 
			"type": "float", 
			"desc": "delay" 
			},
			
			
	  ],
	  "returns":
      [
			{ 
			"type": "int", 
			"desc": "the unique id for this behavior" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"colorTo()",
      "example":"",
      "description":"Transitions to 'color' (rgba) over 'seconds' starting at 'delay' seconds in the future",
      "syntax":"colorTo(float[] colors)<br/>colorTo(float[] colors, float seconds)<br/>colorTo(float[] colors, float seconds, float delay)<br/>colorTo(float[] colors, float seconds, float delay, function callback)",
      "parameters":
      [
			{ 
			"type": "float[]", 
			"desc": "colors (length 1-4)  r,g,b,a (0-255)" 
			},
			{ 
			"type": "float", 
			"desc": "time for fade (optional, default=1)" 
			},
			{ 
			"type": "float", 
			"desc": "seconds (optional, default=0),  # of seconds in the future that the fade will start " 
			},
			{ 
			"type": "function", 
			"desc": "callback the callback to be invoked when the behavior has completed (optional: default=onRiTaEvent(e))" 
			},
			
			
	  ],
	  "returns":
      [
			{ 
			"type": "int", 
			"desc": "the unique id for this behavior" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"rotateTo()",
      "example":"",
      "description":"Rotates to 'radians' over 'seconds' starting at 'delay' seconds in the future",
      "syntax":"rotateTo(float angleInRadians)<br/>rotateTo(float angleInRadians, float seconds)<br/>rotateTo(float angleInRadians, float seconds, float delay)<br/>rotateTo(float angleInRadians, float seconds, float delay, function callback)",
      "parameters":
      [
			{ 
			"type": "float", 
			"desc": "angleInRadians" 
			},
			{ 
			"type": "float", 
			"desc": "time for fade (optional, default=1)" 
			},
			{ 
			"type": "float", 
			"desc": "seconds (optional, default=0),  # of seconds in the future that the fade will start " 
			},
			{ 
			"type": "function", 
			"desc": "callback the callback to be invoked when the behavior has completed (optional: default=onRiTaEvent(e))" 
			},
			
			
	  ],
	  "returns":
      [
			{ 
			"type": "int", 
			"desc": "the unique id for this behavior" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"scaleTo()",
      "example":"",
      "description":"Scales to 'theScale' over 'seconds' starting at 'delay' seconds in the future",
      "syntax":"scaleTo(float theScale)<br/>scaleTo(float theScale, float seconds)<br/>scaleTo(float theScale, float seconds, float delay)<br/>scaleTo(float theScale, float seconds, float delay, function callback)",
      "parameters":
      [
			{ 
			"type": "float", 
			"desc": "theScale" 
			},
			{ 
			"type": "float", 
			"desc": "time for fade (optional, default=1)" 
			},
			{ 
			"type": "float", 
			"desc": "seconds (optional, default=0),  # of seconds in the future that the fade will start " 
			},
			{ 
			"type": "function", 
			"desc": "callback the callback to be invoked when the behavior has completed (optional: default=onRiTaEvent(e))" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "int", 
			"desc": "the unique id for this behavior" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"stopBehavior()",
      "example":"",
      "description":"Removes the specified text behavior for the object ",
      "syntax":"stopBehavior(int id)",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "the behavior id" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "RiText", 
			"desc": "this RiText" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"stopBehaviors()",
      "example":"",
      "description":"Removes all text behaviors for the object",
      "syntax":"stopBehaviors()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "RiText", 
			"desc": "this RiText" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"textTo()",
      "example":"",
      "description":"Fades out the current text and fades in the <code>newText</code> over <code>seconds</code>",
      "syntax":"textTo(String newText)<br/>textTo(String newText, float seconds)<br/>textTo(String newText, float seconds, float endAlpha)<br/>textTo(String newText, float seconds, float endAlpha, function callback)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "newText to be fade in" 
			},
			{ 
			"type": "float", 
			"desc": "time for fade" 
			},
			{ 
			"type": "float", 
			"desc": "(optional, default=255), the alpha to end on" 
			},
			{ 
			"type": "function", 
			"desc": "callback the callback to be invoked when the behavior has completed (optional: default=onRiTaEvent(e))" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "int", 
			"desc": "the unique id for this behavior" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"RiText.createFont()",
      "example":"",
      "description":"",
      "syntax":"RiText.createFont(fontName, fontsize, leading)",
      "parameters":
      [
			{ 
			"type": "", 
			"desc": "" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "RiText", 
			"desc": "this RiText" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"RiText.createLetters()",
      "example":"",
      "description":"",
      "syntax":"RiText.createLetters(txt, x, y, w, h, fontObj)",
      "parameters":
      [
			{ 
			"type": "", 
			"desc": "" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "RiText", 
			"desc": "this RiText" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"RiText.createWords()",
      "example":"",
      "description":"",
      "syntax":"RiText.createWords(txt, x, y, w, h, fontObj)",
      "parameters":
      [
			{ 
			"type": "", 
			"desc": "" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "RiText", 
			"desc": "this RiText" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"RiText.createLines()",
      "example":"",
      "description":"",
      "syntax":"RiText.createLines(txt, x, y, maxW, maxH, theFont)",
      "parameters":
      [
			{ 
			"type": "", 
			"desc": "" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "", 
			"desc": "" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"RiText.drawAll()",
      "example":"",
      "description":"A convenience method to draw all existing RiText objects (with no argument) or an array of RiText objects (if supplied as an argument)",
      "syntax":"RiText.drawAll(RiText[] array)<br/>RiText.drawAll(RiText[] array)",
      "parameters":
      [
			{ 
			"type": "RiText[]", 
			"desc": "draws only the array if supplied (optional)" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "None", 
			"desc": "" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"RiText.dispose()",
      "example":"",
      "description":"",
      "syntax":"RiText.dispose()",
      "parameters":
      [
			{ 
			"type": "", 
			"desc": "" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "", 
			"desc": "" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"RiText.disposeAll()",
      "example":"",
      "description":"",
      "syntax":"RiText.disposeAll()",
      "parameters":
      [
			{ 
			"type": "", 
			"desc": "" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "", 
			"desc": "" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"RiText.defaultAlignment()",
      "example":"",
      "description":"Sets/gets the default alignment for all RiTexts",
      "syntax":"RiText.defaultAlignment()<br/>RiText.defaultAlignment(int align)",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "align (optional, for sets only)" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "int", 
			"desc": "the current default alignment" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"RiText.defaultColor()",
      "example":"",
      "description":"Sets/gets the default color",
      "syntax":"RiText.defaultColor()<br/>RiText.defaultColor(float[] color)",
      "parameters":
      [
			{ 
			"type": "float[]", 
			"desc": "color" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "float[]", 
			"desc": "the current default color" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"RiText.defaultFont()",
      "example":"",
      "description":"Sets/gets the default font for all RiTexts",
      "syntax":"RiText.defaultFont()<br/>RiText.defaultFont(PFont font)<br/>RiText.defaultFont(PFont font, string fontName)<br/>RiText.defaultFont(PFont font, string fontName, int fontSize)<br/>RiText.defaultFont(PFont font, string fontName, int fontSize, int leading)",
      "parameters":
      [
			{ 
			"type": "PFont", 
			"desc": "font (optional, for 'sets' only)" 
			},
			{ 
			"type": "String", 
			"desc": "the font name (optional, for 'sets' only)" 
			},
			{ 
			"type": "int", 
			"desc": "the font size (optional, for 'sets' only)" 
			},
			{ 
			"type": "int", 
			"desc": "the font leading (optional, for 'sets' only)" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "PFont", 
			"desc": "the current default font" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"RiText.defaultFontSize()",
      "example":"",
      "description":"Sets/gets the default font size for all RiTexts",
      "syntax":"RiText.defaultFontSize()<br/>RiText.defaultFontSize(int size)",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "size (optional, for sets only)" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "int", 
			"desc": "the current default font size" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"RiText.defaultMotionType()",
      "example":"",
      "description":"Sets/gets the default font size for all RiTexts",
      "syntax":"RiText.defaultMotionType(int motionType)",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "motionType" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "int", 
			"desc": "the current default motionType" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"RiText.showBoundingBoxes()",
      "example":"",
      "description":"Sets/gets the default bounding box visibility",
      "syntax":"RiText.showBoundingBoxes()<br/>RiText.showBoundingBoxes(boolean size)",
      "parameters":
      [
			{ 
			"type": "boolean", 
			"desc": "size (optional, for sets only)" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "boolean", 
			"desc": "the current default bounding box visibility" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"RiText.height()",
      "example":"",
      "description":"Convenience method to get the height of the current drawing surface",
      "syntax":"RiText.height()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "number", 
			"desc": "height" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"RiText.width()",
      "example":"",
      "description":"Convenience method to get the width of the current drawing surface",
      "syntax":"RiText.width()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "number", 
			"desc": "width" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"RiText.size()",
      "example":"",
      "description":"Convenience method to set the size of the drawing surface in the current renderer context ",
      "syntax":"RiText.size(number width, number height)",
      "parameters":
      [
      		{ 
			"type": "number", 
			"desc": "width" 
			},
			{ 
			"type": "number", 
			"desc": "height" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "None", 
			"desc": "" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"RiText.randomColor()",
      "example":"",
      "description":"Returns a random color in which the 3 values for rgb (or rgba if 'includeAlpha' is true), are between min and max ",
      "syntax":"RiText.randomColor(number min, number max, boolean includeAlpha)",
      "parameters":
      [
      		{ 
			"type": "number", 
			"desc": "min value" 
			},
			{ 
			"type": "number", 
			"desc": "max value" 
			},
			{ 
			"type": "boolean", 
			"desc": "true if includes alpha" 
			},


	  ],
	  "returns":
      [
			{ 
			"type": "number[]", 
			"desc": "numbers - [r,g,b] or [r,g,b,a]" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"RiText.background()",
      "example":"",
      "description":"Returns a random color in which the 3 values for rgb (or rgba if 'includeAlpha' is true), are between min and max ",
      "syntax":"RiText.background(float r, float g, float b, float a)",
      "parameters":
      [
      		{ 
			"type": "float", 
			"desc": "r" 
			},
			{ 
			"type": "float", 
			"desc": "g" 
			},
			{ 
			"type": "float", 
			"desc": "b" 
			},
			{ 
			"type": "float", 
			"desc": "a" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "None", 
			"desc": "" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"RiText.mouse()",
      "example":"",
      "description":"Returns the mouse position from a mouse event in a cross-browser compatible fashion",
      "syntax":"RiText.mouse(MouseEvent e)",
      "parameters":
      [
      		{ 
			"type": "MouseEvent", 
			"desc": "mouseEvent" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "object", 
			"desc": "mouse position with x,y properties" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"RiText.loop()",
      "example":"RiText.loop();<br/>RiText.loop('draw');<br/>RiText.loop(30);<br/>RiText.loop(draw, 10);",
      "description":"Starts an animation loop that calls the specified callback (usually 'draw') at the specified fps ",
      "syntax":"RiText.loop()<br/>RiText.loop(function callback)<br/>RiText.loop(function callback, number fps)",
      "parameters":
      [
      		{ 
			"type": "function", 
			"desc": "the animation callback (optional, default=60)" 
			},
			{ 
			"type": "number", 
			"desc": "the target framesPerSecond (optional, default='draw')" 
			},


	  ],
	  "returns":
      [
			{ 
			"type": "None", 
			"desc": "" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"RiText.noLoop()",
      "example":"",
      "description":"Immediately stops the current animation loop and clears ",
      "syntax":"RiText.noLoop()",
      "parameters":
      [
      		{ 
			"type": "None", 
			"desc": "" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "None", 
			"desc": "" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"RiText.line()",
      "example":"",
      "description":"Convenience method to draw a crisp line on the drawing surface",
      "syntax":"RiText.line(number x1, number y1, number x2, number y2)<br/>RiText.line(number x1, number y1, number x2, number y2, number lineWidth)",
      "parameters":
      [
      		{ 
			"type": "number", 
			"desc": "x1" 
			},
			{ 
			"type": "number", 
			"desc": "y1" 
			},
			{ 
			"type": "number", 
			"desc": "x2" 
			},
			{ 
			"type": "number", 
			"desc": "y2" 
			},
			{ 
			"type": "number", 
			"desc": "lineWidth" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "None", 
			"desc": "" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"RiText.graphics()",
      "example":"",
      "description":"Returns the current graphics context, either a canvas 2d'-context or ProcessingJS instance ",
      "syntax":"RiText.graphics()",
      "parameters":
      [
      		{ 
			"type": "None", 
			"desc": "" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "object", 
			"desc": "" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"RiText.picked()",
      "example":"var rts = RiText.getPicked(mx, my);<br/>if (rts.length) { <br/>	rts[0].doSomething();<br/>}",
      "description":"Returns all RiTexts that contain the point x,y or null if none do. <br/><br/>Note: this will return an array even if only one item is picked, therefore, you should generally use it as example",
      "syntax":"RiText.picked(float x, float y)",
      "parameters":
      [
      		{ 
			"type": "float", 
			"desc": "x" 
			},
			{ 
			"type": "float", 
			"desc": "y" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "RiText[]", 
			"desc": "one or more RiTexts containing the point, or an empty array if none do." 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"RiText.timer()",
      "example":"",
      "description":"Starts a timer that calls 'onRiTaEvent' or the specified callback every 'period' seconds",
      "syntax":"RiText.timer(float period, function callback)",
      "parameters":
      [
      		{ 
			"type": "float", 
			"desc": "period (in seconds)" 
			},
			{ 
			"type": "function", 
			"desc": "callback called every 'period' seconds (default=onRiTaEvent)" 
			},
			
	  ],
	  "returns":
      [
			{ 
			"type": "int", 
			"desc": "the unique id for the timer" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"RiText.stopTimer()",
      "example":"",
      "description":"Stops a timer according to its unique id",
      "syntax":"RiText.stopTimer(int id)",
      "parameters":
      [
      		{ 
			"type": "int", 
			"desc": "the unique id for the timer" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "None", 
			"desc": "" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"RiText.pauseTimer()",
      "example":"",
      "description":"Pauses a timer according to its unique id (and assigns a new unique id)",
      "syntax":"RiText.pauseTimer(int id, float pauseSec)",
      "parameters":
      [
      		{ 
			"type": "int", 
			"desc": "the unique id for the timer" 
			},
			{ 
			"type": "float", 
			"desc": "period (in seconds)" 
			},

	  ],
	  "returns":
      [
			{ 
			"type": "int", 
			"desc": "the new unique id for the timer" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
   {
      "methodName":"RiText.random()",
      "example":"",
      "description":"Returns a random number between 'min' (default 0) and 'max'",
      "syntax":"RiText.random()",
      "parameters":
      [
      		{ 
			"type": "None", 
			"desc": "" 
			},


	  ],
	  "returns":
      [
			{ 
			"type": "float", 
			"desc": "" 
			},
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":"",
   },
  
]