[
	{
      "methodName":"addRule()",
      "example":"",
      "description":"Adds a rule to the existing grammar, replacing any existing rule with the same name ",
      "syntax":"addRule(String name, String ruleStr, float weight)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "name" 
			},
			{ 
			"type": "String", 
			"desc": "ruleStr" 
			},
			{ 
			"type": "float", 
			"desc": "weight" 
			}
			
	  ],
	  "returns":
      [
			{ 
			"type": "RiGrammar", 
			"desc": "this RiGrammar" 
			}
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"expand()",
      "example":"",
      "description":"Expands a grammar from its '&#60;start&#62;' symbol",
      "syntax":"expand(String funs)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "[Javascript Only] One or more functions to be added to the current context BEFORE executing the expand() call. Useful for defining functions referenced in back-ticked rules." 
			}
			
	  ],
	  "returns":
      [
			{ 
			"type": "String", 
			"desc": "the result of the expansion" 
			}
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"expandFrom()",
      "example":"",
      "description":'Expands the grammar, starting from the given symbol. <br/>&nbsp;<br/>RiGrammar.expand() is equivalent to RiGrammar.expandFrom("<start>").',
      "syntax":"expandFrom(String rule)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "rule" 
			}
			
	  ],
	  "returns":
      [
			{ 
			"type": "String", 
			"desc": "the result of the expansion"  
			}
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"expandWith()",
      "example":"",
      "description":"Expands the grammar after replacing an instance of the non-terminal 'symbol' with the String in 'literal'.<br/>&nbsp;<br/>Guarantees that 'literal' will be in the final expanded String, assuming at least one instance of 'symbol' in the Grammar.",
      "syntax":"expandWith(String literal, String symbol)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "literal" 
			},
			{ 
			"type": "String", 
			"desc": "symbol" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "String", 
			"desc": "the result of the expansion" 
			}			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"getGrammar()",
      "example":"",
      "description":"Returns the current grammar as a string",
      "syntax":"getGrammar()",
      "parameters":[],
      "returns":
      [
			{ 
			"type": "String", 
			"desc": "a string representation of the grammar" 
			}
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"getRule()",
      "example":"",
      "description":"Returns the requested rule",
      "syntax":"getRule(String ruleName)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "rule name" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "String", 
			"desc": "the rule" 
			}
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"hasRule()",
      "example":"",
      "description":"Returns true if the requested rule exists in the grammar, else false",
      "syntax":"hasRule(String name)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "the rule name" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "boolean", 
			"desc": "true if the rule exists in the grammar, else false" 
			}
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"print()",
      "example":"",
      "description":"Prints the grammar rules to the console in human-readable format (useful for debugging)",
      "syntax":"print()",
      "parameters":
      [

	  ],
	  "returns":
      [
			{ 
			"type": "RiGrammar", 
			"desc": "this RiGrammar" 
			}
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"removeRule()",
      "example":"",
      "description":"Deletes the named rule from the grammar",
      "syntax":"removeRule(String name)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "the rule name" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "RiGrammar", 
			"desc": "this RiGrammar" 
			}
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"reset()",
      "example":"",
      "description":"Clears all rules in the current grammar",
      "syntax":"reset()",
      "parameters": [],
	  "returns":
      [
			{ 
			"type": "RiGrammar", 
			"desc": "this RiGrammar" 
			}
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"load()",
      "example":"",
      "description":"Re-initializes the grammar from an object or string containing the rules",
      "syntax":"load(String grammar)<br/>load(Object grammar)",
      "parameters":
      [
			{ 
			"type": "String OR Object", 
			"desc": "grammar containing the grammar rules" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "RiGrammar", 
			"desc": "this RiGrammar" 
			}
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"loadFromFile()",
      "example":"",
      "description":"Re-initializes the grammar from a file containing the grammar rules",
      "syntax":"loadFromFile(String grammarFileURL)<br/>",
      "parameters":
      [
			{ 
				"type": "String", 
				"desc": "URL of file containing the grammar rules" 
			}
	  ],
	  "returns":
      [
			{ 
				"type": "RiGrammar", 
				"desc": "this RiGrammar" 
			}
			
	  ],
      "related":"",
      "platform":"In Javascript, uses JQuery's ajax() method if available, otherwise it attempts an invisible iframe hack. Alternatively, one can use the &lt;script src=...&gt; tag to include the JSON grammar file in an html page.",
	  "note":""
   }      
]