[
	{
      "methodName":"addRule()",
      "example":"",
      "description":"Adds a rule to the existing grammar, replacing any existing rule with the same name ",
      "syntax":"addRule(String name, String ruleStr, String weight)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "name" 
			},
			{ 
			"type": "String", 
			"desc": "ruleStr" 
			},
			{ 
			"type": "String", 
			"desc": "weight" 
			}
			
	  ],
	  "returns":
      [
			{ 
			"type": "RiGrammar", 
			"desc": "this RiGrammar" 
			}
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"expand()",
      "example":"",
      "description":"Expands a grammar from its '&#60;start&#62;' symbol",
      "syntax":"expand(String funs)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "One or more function to be added to the current context BEFORE executing the expand() call. Useful for defining functions referenced in back-ticked rules." 
			}
			
	  ],
	  "returns":
      [
			{ 
			"type": "String", 
			"desc": "" 
			}
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"expandFrom()",
      "example":"",
      "description":"Expands the grammar, starting from the given symbol. <br/>RiGrammar.expand() is equivalent to RiGrammar.expandFrom('').",
      "syntax":"expandFrom(String rule)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "rule" 
			}
			
	  ],
	  "returns":
      [
			{ 
			"type": "String", 
			"desc": "" 
			}
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"expandWith()",
      "example":"",
      "description":"Expands the grammar after replacing an instance of the non-terminal 'symbol' with the String in 'literal'. <br/>Guarantees that 'literal' will be in the final expanded String, assuming at least one instance of 'symbol' in the Grammar.",
      "syntax":"expandWith(String literal, String symbol)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "literal" 
			},
			{ 
			"type": "String", 
			"desc": "symbol" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "String", 
			"desc": "expanded text" 
			}
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"getRule()",
      "example":"",
      "description":"Returns the requested rule",
      "syntax":"getRule(String pre)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "rule name" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "String", 
			"desc": "the rule" 
			}
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"hasRule()",
      "example":"",
      "description":"Returns true if the requested rule exists in the grammar, else false",
      "syntax":"hasRule(String name)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "the rule name" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "boolean", 
			"desc": "true if the rule exists in the grammar, else false" 
			}
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"print()",
      "example":"",
      "description":"Prints the grammar rules to the console in human-readable format (useful for debugging)",
      "syntax":"print()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "RiGrammar", 
			"desc": "this RiGrammar" 
			}
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"removeRule()",
      "example":"",
      "description":"Deletes the named rule from the grammar",
      "syntax":"removeRule(String name)",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "RiGrammar", 
			"desc": "this RiGrammar" 
			}
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"reset()",
      "example":"",
      "description":"Clears all rules in the current grammar",
      "syntax":"reset()",
      "parameters":
      [
			{ 
			"type": "None", 
			"desc": "" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "RiGrammar", 
			"desc": "this RiGrammar" 
			}
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "methodName":"setGrammar()",
      "example":"",
      "description":"inits a grammar from an object or JSON string containing the rules (rather than a file) and replacing any existing grammar.",
      "syntax":"setGrammar(String grammar)<br/>setGrammar(object grammar)",
      "parameters":
      [
			{ 
			"type": "String OR object", 
			"desc": "grammar containing the grammar rules" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "RiGrammar", 
			"desc": "this RiGrammar" 
			}
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   }   
]