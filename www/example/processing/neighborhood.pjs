/**
 * Returns the 9-cell neighborhood for the specified cell ([4]), as follows:<br>
 *
 * <pre>
 * [0] [1] [2]
 * [3] [4] [5]
 * [6] [7] [8]
 * </pre>
 *
 * One or more of these cells may be null if they are off the edge of the
 * grid.
 * <p>
 * Positions (for layout above) are specified as follows:
 *
 * <pre>
 *         [4] = the current word
 *         [3] = the preceding word
 *         [5] = the next word
 *
 *         [2] = rightmost overlapping word on line above
 *               (if first line return null)
 *               but if current is last word in line AND
 *               boundingBox.x + width &gt;= that of the
 *               last word on line above
 *               then = first word of current line
 *         [8] = rightmost overlapping word on line below
 *               (including the first line)
 *               but if current is last word on line AND
 *               boundingBox.x + width &gt;= that of the
 *               last word on line below
 *               then = first word 2 lines below wrapping
 *               to first line
 *
 *         [1] = overlapping word preceding 2, otherwise null
 *         [7] = overlapping word preceding 8, otherwise null
 *
 *         [0] = overlapping word preceding 1, otherwise null
 *         [6] = overlapping word preceding 7, otherwise null
 * </pre>
 */
RiText[] neighborhood(RiText center) {

  if(center == null) {
	console.warn("Null RiText passed to RiTextGrid.neighborhood()");
	return new RiText[9];
  }

  RiText over = null, under = null, rts[] = null;
  var pOver = null, pUnder = null;

  // WORKING HERE:
  var cOver = coords(center);
  console.log("cOver=" + cOver);

  if(cOver == null) {
	console.warn("No coords " + "for center: " + center + ", returning empty array!!!");
	return new RiText[9];
  }

  int lineY = cOver.y, lineX = cOver.x;
  rts = new RiText[9];

  // get cell directly above if not 1st line
  // we do not allow the first line to wrap back to end of text
  if(lineY > 0) {
	over = bestAbove(center, 3);

	if(over == null) // nothing directly above
	{
	  // use 1st word of current line
	  over = cellAt(0, lineY);
	} else {
	  // if lastWord and its bbx-end < current.bb-end
	  // set it to first word of current line;
	  if(isLineEnd(center) && rightOutdentIsGreaterOrEqual(center, over)) {
		over = rtg.cellAt(0, lineY);
	  }
	}
	// now get the point for 'over' = rts[2]
	pOver = rtg.coordsFor(over);
  } else {
	// J: on first line of grid - what should we do here?
  }

  // get cell directly below
  if(lineY < rtg.numLines() - 1) // not the last line
  {
	under = rtg.bestBelow(center, 3);
	if(under == null) // nothing directly under
	{
	  // general case
	  if(lineY < rtg.numLines() - 2) {
		under = rtg.cellAt(0, lineY + 2);
	  }

	  // select first line of next grid
	  else if(lineY == rtg.numLines() - 2) {
		under = rtg.next.cellAt(0, 0);
	  }
	} else
	// (under != null)
	{
	  // if lastWord and its bbx-end < current.bb-end
	  // set it to first word of current line;
	  if(rtg.isLineEnd(center) && rtg.rightOutdentIsGreaterOrEqual(center, under)) {
		under = (lineY < rtg.numLines() - 2) ? rtg.cellAt(0, lineY + 2) : rtg.cellAt(0, lineY + 1);
	  }
	}
	pUnder = rtg.coordsFor(under);
  } else
  // is last line so wrap
  {
	under = null;

	RiTextGrid next = rtg.getNext();

	RiText[] firstLine = next.lineAt(0);
	for(int i = firstLine.length - 1; i >= 0; i--) {
	  if(next.intersectsOnX(center, firstLine[i], 3)) under = firstLine[i];
	}
	if(under == null) Readers.warn("Illegal state, " + "nothing under: " + center + " (on next grid)");
	pUnder = next.coordsFor(under);
  }

  // center row (3,4,5)
  if(lineX > 0) rts[3] = rtg.previousCell(center);
  rts[4] = center;
  // always wrap, to defer test: if (x < lineAt(y).length - 1)
  rts[5] = rtg.nextCell(center);

  // top row (2,1,0)
  if(over != null) {
	rts[2] = over;

	RiTextGrid top = rtg;

	// always wrap or test: if (pOver.x > 0) {
	rts[1] = top.previousCell(pOver);
	if(rts[1] != null) {
	  if(!top.intersectsOnX(rts[1], rts[4], 0)) rts[1] = null;
	  else top = RiTextGrid.getGridFor(rts[1]);
	}

	// always wrap or: }
	if(rts[1] != null) {
	  pOver = top.coordsFor(rts[1]);
	  // always wrap or test: if (pOver.x > 0) {
	  rts[0] = top.previousCell(pOver);

	  // what if rts[0] is on a diff grid?
	  if(rts[0] != null && !top.intersectsOnX(rts[0], rts[4], 0)) rts[0] = null;
	  // always wrap or: }
	}
  }

  // bottom row (8,7,6)
  if(under != null) {
	rts[8] = under;

	// what if rts[8] is on a the next grid?
	RiTextGrid next = RiTextGrid.getGridFor(rts[8]);

	// always wrap or test: if (pUnder.x > 0)
	rts[7] = next.previousCell(pUnder);

	if(rts[7] != null) {

	  next = RiTextGrid.getGridFor(rts[8]); // need this?
	  if(!next.intersectsOnX(rts[7], rts[4], 0)) rts[7] = null;
	  else
	  // what if rts[7] is on a differnt grid?
	  next = RiTextGrid.getGridFor(rts[7]);
	}

	if(rts[7] != null) {
	  pUnder = next.coordsFor(rts[7]);
	  // always wrap or test: if (pUnder.x > 0) {
	  rts[6] = next.previousCell(pUnder);

	  // what if rts[6] is on a diff grid?
	  if(rts[6] != null && !next.intersectsOnX(rts[6], rts[4], 0)) rts[6] = null;
	}
  }

  return rts;

} // re-add caching?

function coords(rt) {
	console.log('coords: '+rt);
	if (rt != null) {

		for(int i = 0; i < cells.length; i++) {
			for(int j = 0; j < cells[i].length; j++) {
				//console.log("check: "+i+'.'+j);
				if(cells[i][j] == rt) return [j, i];
			}
		}
	}

	return null;
}

public RiText bestAbove(RiText rt, float slop) {

	RiText best = null;
	float bestY = 0;
	List l = bestAboves(rt, slop);
	for(Iterator it = l.iterator(); it.hasNext();) {
		RiText cand = (RiText) it.next();
		if(cand.x > bestY) {
			bestY = cand.x;
			best = cand;
		}
	}
	return best;
}

 private List bestAboves(RiText rt, float slop)
  {
    var l = [];
    if (rt == null)
      return l;
    var p1 = coordsFor(rt);
    var p2 = null;
    if (p1.y > 0)
    {
      Iterator it = iterator();
      while (it.hasNext())
      {
        RiText test = (RiText) it.next();
        p2 = coordsFor(test);
        if (p1.y == p2.y + 1 && intersectsOnX(rt, test, slop))
          l.add(test);
      }
    }
    return l;
  }

public RiText[] lineAt(int _y) {
	if (cells == null || _y < 0 || _y > cells.length - 1) 
	  return null;
	return cells[_y];
}


public RiText cellAt(int _x, int _y) {
	RiText[] line = lineAt(_y);
	if(line == null) return null;
	return(_x >= 0 && _x < line.length) ? line[_x] : null;
}